{
  "swagger": "2.0",
  "info": {
    "title": "Myhiscox Quotation Open API definition",
    "version": "1.0",
    "contact": {
      "name": "Hiscox"
    },
    "description": "Start policy creation API\n"
  },
  "host": "localhost:81",
  "schemes": [
    "https"
  ],
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "paths": {
    "/v1/quotation/project/{id}/product-variants": {
      "post": {
        "summary": "Create product variants per project",
        "tags": [],
        "responses": {
          "201": {
            "description": "Created list of Project has Product Variants",
            "schema": {
              "type": "object",
              "properties": {
                "projectId": {
                  "type": "integer"
                }
              }
            }
          }
        },
        "description": "POST\n\nFind Project based on project JSON request Body parameter DTO\nIf project exist\n  foreach element in list of product variants --> exists in BrokerageHasProductVariant\n    Insert element in ProjectHasProductVariant entity\n  Return project Id updated",
        "security": [
          {
            "API Key - 1": []
          }
        ],
        "parameters": [
          {
            "type": "string",
            "in": "header",
            "name": "Accept-Language"
          },
          {
            "type": "string",
            "in": "header",
            "name": "email",
            "description": "broker email",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "./models/request_productvariant.v1.json"
              }
            },
            "description": "Array of product variants Ids"
          }
        ],
        "operationId": "'39.3'"
      },
      "parameters": [
        {
          "type": "string",
          "name": "id",
          "in": "path",
          "required": true,
          "description": "projectId"
        }
      ],
      "get": {
        "summary": "Get project product variants",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "./models/response_productvariant.v1.json"
              }
            }
          }
        },
        "description": "GET\n\nFind Project based on projectid query parameter\nIf project exist \n Obtaing produc variants located in projectHasProductVariant entity and also\n in entity BrokerageHasProductVariant based on broker email",
        "security": [
          {
            "API Key - 1": []
          }
        ],
        "parameters": [
          {
            "type": "string",
            "in": "header",
            "name": "Accept-Language"
          },
          {
            "type": "string",
            "in": "header",
            "name": "email",
            "description": "broker email",
            "required": true
          }
        ],
        "tags": [
          "variants"
        ],
        "operationId": "'4.3'"
      }
    },
    "/v1/quotation/project/{id}": {
      "get": {
        "summary": "Get quotation consolidate information",
        "tags": [
          "core"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "./models/response_project.v1.json"
            }
          }
        },
        "security": [
          {
            "API Key - 1": []
          }
        ],
        "parameters": [
          {
            "type": "string",
            "in": "header",
            "name": "Accept-Language"
          },
          {
            "type": "string",
            "in": "header",
            "name": "email",
            "description": "broker email",
            "required": true
          },
          {
            "type": "integer",
            "in": "query",
            "name": "projectId",
            "description": "",
            "required": true
          }
        ],
        "description": "GET\n\nMain Core Quotation consolidation GetEndpoint\nGet quote consolidate information based on project Id\nIntegrate GET request in one endpoint to obtain quotation\n\n- GET /quotation/project/{projectId}/business-areas/\n- GET /quotation/project/{projectId}/sectors-activities/\n- GET /quotation/project/{projectId}/product-variants/\n- GET /quotation/project/{projectId}/risk-data            \n- GET /quotation/project/{projectId}/cover-data/\n- GET /quotation/project/{projectId}/premium/\n- GET /quotation/project/{projectId}/customer-info/\n- GET /quotation/project/{projectId}/period/",
        "operationId": "'2'"
      },
      "parameters": [
        {
          "type": "integer",
          "name": "id",
          "in": "path",
          "required": true,
          "description": "projectId"
        }
      ],
      "put": {
        "summary": "Put quotation consolidate information",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "projectId": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "screen": {
                  "$ref": "./models/screen.v1.json"
                },
                "updatedAt": {
                  "type": "string"
                }
              }
            }
          }
        },
        "description": "PUT\n\nConsolidate PUT operations update.\nBased on infomation provided in each endpoint.\nIf projectId{id} exists:\n\n- PUT /quotation/project/{projectId}/business-areas/ WILL UPDATE AREA\n\n- PUT /quotation/project/{projectId}/sectors-activities/ WILL UPDATE ACTIVITY\n\n- PUT /quotation/project/{projectId}/product-variants/ DELETE RELATED PROJECT DATA \n    THEN INSERT LIKE GLOBAL INSERTING PROCESS\n\n- PUT /quotation/project/{projectId}/risk-data DELETE RELATED PROJECT DATA            \n    THEN INSERT LIKE GLOBAL INSERTING PROCESS\n\n- PUT /quotation/project/{projectId}/cover-data/\nDELETE RELATED PROJECT DATA THEN INSERT LIKE GLOBAL INSERTING PROCESS\n\n- PUT /quotation/project/{projectId}/payment/\nUPDATE PROJECT DATA \n\n- PUT /quotation/project/{projectId}/premium/\nDELETE RELATED PROJECT DATA THEN INSERT LIKE GLOBAL INSERTING PROCESS\n, product variants premium and reset to 0 values in projects fields\n\n- PUT /quotation/project/{projectId}/customer-info/ DELETE RELATED PROJECT DATA \n THEN INSERT LIKE GLOBAL INSERTING PROCESS\n\n- PUT /quotation/project/{projectId}/period/ DELETE RELATED PROJECT DATA\n THEN INSERT LIKE GLOBAL INSERTING PROCESS\n \nConsolidated PUT endpoint will be check initial 3 endpoint if needed information to delete in cascade. \n\n",
        "operationId": "'3'",
        "security": [
          {
            "API Key - 1": []
          }
        ],
        "parameters": [
          {
            "type": "string",
            "in": "query",
            "name": "Accept-Language"
          },
          {
            "type": "string",
            "in": "query",
            "name": "email"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "./models/request_quotation.v1.json"
            }
          }
        ]
      }
    },
    "/v1/quotation/business-areas": {
      "post": {
        "summary": "Business area to start new project quotation",
        "responses": {
          "201": {
            "description": "Created new project",
            "schema": {
              "type": "object",
              "properties": {
                "projectId": {
                  "type": "integer"
                }
              }
            },
            "examples": {
              "example-1": {}
            }
          },
          "401": {
            "description": "Unauthorized, invalid token or email",
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "description": "POST\n\nStart new quotation process with business area PSC.\n  1 For v.1 of this endpoint, area will be 'PSC' (if string locate id in business area entity (1))\n  2.Create new Project entitiy and set:\n    2.1 business area to value 1 PSC\n    2.2 id_user based on broker email in header request objet\n    2.3 id_state to value entity State - Draft (1) \n    2.4 id_screen to value entoty Screen - Activities (1) .\n    2.5 createdAt date to current day\n    2.6 id_souce to value entity Source - with slug 'api'\n    2.7 Return ProjectId created\n\n",
        "parameters": [
          {
            "type": "string",
            "in": "header",
            "name": "Accept-Language",
            "description": ""
          },
          {
            "type": "string",
            "in": "header",
            "name": "email",
            "description": "broker email",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "./models/request_area.v1.json"
            }
          }
        ],
        "operationId": "'39.1'",
        "tags": [
          "areas"
        ]
      },
      "parameters": [],
      "get": {
        "summary": "Get Business Areas",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "./models/response_area.v1.json"
              }
            }
          }
        },
        "description": "GET\n\nRetieve business areas\n  1. Return list of array for business areas DTO",
        "security": [
          {
            "API Key - 1": []
          }
        ],
        "parameters": [
          {
            "type": "string",
            "in": "header",
            "name": "Accept-Language"
          },
          {
            "type": "string",
            "in": "header",
            "name": "email",
            "description": "broker email",
            "required": true
          }
        ],
        "operationId": "'4.1'"
      }
    },
    "/v1/quotation": {
      "post": {
        "summary": "Unique endpoint consolidate quotation creation",
        "tags": [
          "core"
        ],
        "responses": {
          "201": {
            "description": "Created quotation",
            "schema": {
              "type": "object",
              "properties": {
                "projectId": {
                  "type": "integer"
                }
              }
            },
            "headers": {}
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "description": "POST\n\nMain Core Quotation consolidation Post Endpoint\nIntegrate POST request in one endpoint to create quotation\n \n- POST /v1/quotation/business-areas/psc\n- PUT  /v1/quotation/project/{id}/activity/{activityId}\n- POST /v1/quotation/project/{id}/product-variants/\n- POST /v1/quotation/project/{id}/risk-data\n\n- POST /v1/quotation/project/{id}/cover-data/\n- POST /v1/quotation/project/{id}/payment/\n- POST /v1/quotation/project/{id}/premium/\n- POST /v1/quotation/project/{id}/customer-info/\n- POST /v1/quotation/project/{id}/period/{startDate}\n\nThis endpoint generated policy before to be approved (solicitud Emisión)\n",
        "security": [
          {
            "API Key - 1": []
          }
        ],
        "parameters": [
          {
            "type": "string",
            "in": "header",
            "name": "Accept-Language"
          },
          {
            "type": "string",
            "in": "header",
            "name": "Auth-Email",
            "description": "broker email",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "./models/request_quotation.v1.json"
            },
            "description": ""
          },
          {
            "type": "string",
            "in": "header",
            "name": "Auth-Brokerage-Id",
            "description": "broker id",
            "required": true
          }
        ],
        "operationId": "'3.0'"
      },
      "parameters": []
    },
    "/v1/quotation/project/{id}/activity/{activityId}": {
      "parameters": [
        {
          "type": "integer",
          "name": "id",
          "in": "path",
          "required": true,
          "description": "projectId"
        },
        {
          "type": "integer",
          "name": "activityId",
          "in": "path",
          "required": true,
          "description": "activityId"
        }
      ],
      "put": {
        "summary": "Update activity per project",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "projectId": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "description": "PUT\n\nFind Project based on projectId path parameter\nIf project exist \n Update activity in Project based on activity path parameter\n Update project updatedAt field property\n\n",
        "security": [
          {
            "API Key - 1": []
          }
        ],
        "parameters": [
          {
            "type": "string",
            "in": "header",
            "name": "Accept-Language"
          },
          {
            "type": "string",
            "in": "header",
            "name": "email",
            "description": "broker email",
            "required": true
          }
        ],
        "tags": [
          "sectors-activities"
        ],
        "operationId": "'39.2'"
      }
    },
    "/v1/quotation/project/{id}/document/{type}": {
      "parameters": [
        {
          "type": "integer",
          "name": "id",
          "in": "path",
          "required": true,
          "description": "projectId"
        },
        {
          "type": "string",
          "name": "type",
          "in": "path",
          "required": true,
          "description": "type = 'quote'"
        }
      ],
      "post": {
        "summary": "Store server quote document and retrieve",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "file": {
                  "$ref": "./models/document.v1.json"
                }
              },
              "required": [
                "file"
              ]
            }
          }
        },
        "description": "POST\n\nGetting document PDF based on type parameter \nThe process creates a quote policy file in server\n\n\n ",
        "security": [
          {
            "API Key - 1": []
          }
        ],
        "parameters": [
          {
            "type": "string",
            "in": "header",
            "name": "Accept-Language"
          },
          {
            "type": "string",
            "in": "header",
            "name": "email",
            "description": "broker email",
            "required": true
          }
        ],
        "operationId": "'3.3'"
      }
    },
    "/v1/quotation/project/{id}/customer-info": {
      "get": {
        "summary": "Getting project customer-info",
        "tags": [
          "customer-info"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "./models/response_customerdata.v1.json"
            }
          }
        },
        "security": [
          {
            "API Key - 1": []
          }
        ],
        "parameters": [
          {
            "type": "string",
            "in": "header",
            "name": "Accept-Language"
          },
          {
            "type": "string",
            "in": "header",
            "name": "email",
            "description": "broker",
            "required": true
          },
          {
            "type": "integer",
            "in": "query",
            "name": "projectId",
            "required": true
          }
        ],
        "description": "GET\n\nget policy holder info based on project Id",
        "operationId": "'42.6'"
      },
      "post": {
        "summary": "Create customer-info questions and answers",
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "type": "object",
              "properties": {
                "projectId": {
                  "type": "integer"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "./models/request_customerdata.v1.json"
            }
          },
          {
            "type": "string",
            "in": "header",
            "name": "Accept-Languge"
          },
          {
            "type": "string",
            "in": "header",
            "name": "email",
            "description": "broker email",
            "required": true
          }
        ],
        "description": "POST\n\npost policy holder info\nValidate if policy is Clean, stay in curren project status.\nIf Non Clean Project update status to \"Pending Info\"",
        "security": [
          {
            "API Key - 1": []
          }
        ],
        "operationId": "'40.3'"
      },
      "parameters": [
        {
          "type": "integer",
          "name": "id",
          "in": "path",
          "required": true,
          "description": "projectId"
        }
      ]
    },
    "/v1/quotation/project/{id}/payment": {
      "parameters": [
        {
          "type": "string",
          "name": "id",
          "in": "path",
          "required": true,
          "description": "projectId"
        }
      ],
      "put": {
        "summary": "Store policy premium",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "projectId": {
                  "type": "integer"
                }
              }
            }
          }
        },
        "description": "PUT\n\nupdate project payment fields\n\nCalculate Premium fields and store in project and   per Product Variant, based on current infoarmtion stored:\n\n\n- base_net_rate = initial premium, without increments and discounts.\n- net_rate = net premium, includes increments and discounts.\n- taxes , acts over net_rate some %\n- surchange: is a broker fee commissions \n- consortium\n- total_rate = net_rate + taxes + surcharge + consortium\n",
        "security": [
          {
            "API Key - 1": []
          }
        ],
        "parameters": [
          {
            "type": "string",
            "in": "header",
            "name": "Accept-Language"
          },
          {
            "type": "string",
            "in": "header",
            "name": "email"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "./models/request_premium.v1.json"
            },
            "description": ""
          }
        ],
        "operationId": "'40.2'"
      },
      "get": {
        "summary": "Obtain project premium",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "./models/response_premium.v1.json"
            },
            "headers": {}
          }
        },
        "operationId": "'42.5'",
        "description": "GET\n\nGetting project payment value",
        "security": [
          {
            "API Key - 1": []
          }
        ],
        "parameters": [
          {
            "type": "string",
            "in": "header",
            "name": "Accept-Language"
          },
          {
            "type": "string",
            "in": "header",
            "name": "email",
            "description": "broker email"
          }
        ]
      }
    },
    "/v1/quotation/project/{id}/risk-data": {
      "parameters": [
        {
          "type": "string",
          "name": "id",
          "in": "path",
          "required": true,
          "description": "projecId"
        }
      ],
      "post": {
        "summary": "Create risk-data questions and answers",
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "type": "object",
              "properties": {
                "projectId": {
                  "type": "integer"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, invalid token or email",
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "security": [
          {
            "API Key - 1": []
          }
        ],
        "parameters": [
          {
            "type": "string",
            "in": "header",
            "name": "Accept Language"
          },
          {
            "type": "string",
            "in": "header",
            "name": "email",
            "description": "Broker email",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "./models/request_riskdata.v1.json"
            },
            "description": ""
          }
        ],
        "description": "POST\n\nFind Project based on project JSON request Body parameter\nIf project exist \n Store risk-data divided in question and answers in Json request object\n Return project Id updated\nelse\n  return error project not exist \n",
        "tags": [
          "risk-data"
        ],
        "operationId": "'39.4'"
      },
      "get": {
        "summary": "Getting project risk-data",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "./models/response_riskdata.v1.json"
            }
          }
        },
        "security": [
          {
            "API Key - 1": []
          }
        ],
        "parameters": [
          {
            "type": "string",
            "in": "header",
            "name": "Accept-Language"
          },
          {
            "type": "string",
            "in": "header",
            "name": "email",
            "description": "broker email",
            "required": true
          }
        ],
        "description": "GET\n\nObtaining risk data based on project Id path parameter",
        "operationId": "'42.3'"
      }
    },
    "/v1/quotation/project/{id}/cover-data": {
      "get": {
        "summary": "Getting project cover-data",
        "tags": [
          "cover-data"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "./models/response_coverdata.v1.json"
            }
          }
        },
        "security": [
          {
            "API Key - 1": []
          }
        ],
        "parameters": [
          {
            "type": "string",
            "in": "header",
            "name": "Accept Language"
          },
          {
            "type": "string",
            "in": "header",
            "name": "email",
            "description": "Broker email",
            "required": true
          },
          {
            "type": "string",
            "in": "query",
            "name": "product-variants",
            "required": true
          }
        ],
        "description": "GET\n\nGetting cover data based on risk data info based on product variants list",
        "operationId": "'42.4'"
      },
      "parameters": [
        {
          "type": "string",
          "name": "id",
          "in": "path",
          "required": true,
          "description": "projectId"
        }
      ],
      "post": {
        "summary": "Create cover-data questions and answers",
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "type": "object",
              "properties": {
                "projectId": {
                  "type": "integer"
                }
              }
            }
          }
        },
        "description": "POST \n\nStore cover data",
        "security": [
          {
            "API Key - 1": []
          }
        ],
        "parameters": [
          {
            "type": "string",
            "in": "header",
            "name": "Accept Language"
          },
          {
            "type": "string",
            "in": "header",
            "name": "emal",
            "description": "broker email",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "./models/request_coverdata.v1.json"
            }
          }
        ],
        "tags": [
          "cover-data"
        ],
        "operationId": "'40.1'"
      }
    },
    "/v1/quotation/project/{id}/period/{startDate}": {
      "parameters": [
        {
          "type": "string",
          "name": "id",
          "in": "path",
          "required": true,
          "description": "projectId"
        },
        {
          "type": "string",
          "name": "startDate",
          "in": "path",
          "required": true,
          "description": "format yyyy-mm-dd"
        }
      ],
      "put": {
        "summary": "Finalize policy emition with start date",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "projectId": {
                  "type": "integer"
                }
              }
            }
          }
        },
        "description": "PUT\nCheck if project is non clean to return error \nIf is clean then: \nUpdating project state to emition request : \n    2 - quoted.\nUpdating policy period dates\n -  start date to current opetation day\n -  end date: + year - 1 day\n",
        "parameters": [
          {
            "type": "string",
            "in": "header",
            "name": "Accept-Language"
          },
          {
            "type": "string",
            "in": "header",
            "name": "email",
            "description": "broker email"
          }
        ],
        "security": [
          {
            "API Key - 1": []
          }
        ]
      },
      "get": {
        "summary": "Getting project period values",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "./models/response_project.v1.json"
            }
          }
        },
        "description": "GET\n\nGeting project period",
        "operationId": "'43.2'"
      }
    },
    "/v1/quotation/project/{id}/finalize": {
      "parameters": [
        {
          "type": "string",
          "name": "id",
          "in": "path",
          "required": true,
          "description": "projectId"
        }
      ],
      "post": {
        "summary": "ending policy request",
        "tags": [
          "finalize"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "projectId": {
                  "type": "integer"
                }
              }
            }
          }
        },
        "description": "POST\n\nFinalize project policy submition \n  fill bank information\n  store signed documents\n  update project status",
        "security": [
          {
            "API Key - 1": []
          }
        ],
        "parameters": [
          {
            "type": "string",
            "in": "header",
            "name": "Accept-Language"
          },
          {
            "type": "string",
            "in": "header",
            "name": "email",
            "description": "broker email"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "./models/finalizeobject.v1.json"
            }
          }
        ],
        "operationId": "'5.1'"
      }
    },
    "/v1/quotation/project/{id}/premium": {
      "parameters": [
        {
          "type": "string",
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Getting project premium information",
        "tags": [
          "premium"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "projectId": {
                  "type": "integer"
                },
                "premium": {
                  "$ref": "./models/response_premium.v1.json"
                },
                "productVariantPremium": {
                  "type": "array",
                  "items": {
                    "$ref": "./models/response_product_variant_premium.v1.json"
                  }
                }
              }
            }
          }
        },
        "description": "Getting premium values:\n- base_net_rate = initial premium, without increments and discounts.\n- net_rate = net premium, includes increments and discounts.\n- taxes , acts over net_rate some %\n- surchange: is a broker fee commissions \n- consortium\n- total_rate = net_rate + taxes + surcharge + consortium"
      }
    },
    "/v1/quotation/product-variants": {
      "get": {
        "summary": "Get available product variants for brokerage activity",
        "tags": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "./models/response_productvariant.v1.json"
              }
            }
          }
        },
        "operationId": "get-v1-quotation-product-variants",
        "description": "GET\n\nSummary\nList of product variants available to the current Auth_Brokerage-Id and ActivityId (in exists in parameters) that contains API flag enabled\nSteps\nObtain brokerage API product variants associated \nMatch these product variants associated to Path parameter activityId\n",
        "parameters": [
          {
            "type": "string",
            "in": "header",
            "name": "AcceptLanguage"
          },
          {
            "type": "string",
            "in": "header",
            "name": "Auth-Email",
            "description": "broker email",
            "required": true
          },
          {
            "type": "string",
            "in": "header",
            "name": "Auth-Brokerage-Id",
            "description": "broker id",
            "required": true
          },
          {
            "type": "string",
            "in": "query",
            "name": "ActivityId",
            "description": "activity Id fiter"
          },
          {
            "type": "string",
            "in": "query",
            "name": "order1",
            "description": "'productVariantId ASC' (default without order)"
          },
          {
            "type": "string",
            "in": "query",
            "name": "order2",
            "description": "'productVariantName ASC' (default without order)"
          }
        ]
      },
      "parameters": []
    },
    "/v1/quotation/sectors": {
      "get": {
        "summary": "List of available sectors/activities of brokerage",
        "tags": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "./models/response_sectoractivities.v1.json"
              }
            }
          }
        },
        "operationId": "get-v1-quotation-sectors",
        "description": "GET\n\nGet List of Sectors and activities per sector/activity if provided \n  \nSummary\nList of sectors and activies belongs to the current Auth_Brokerage-Id (based on ROLE capabilities) and contains associations to API product variants\nSteps\nObtain brokerage API product variants associated \nFind the associated sector/activities to these product variants  \n  \n  \n  Return list of Sector DTOs and inside each     \n         element list of activities DTO\n  \n  Filter data obtained based on [if exist] not mandatory query parameters in request. (this is not requeriment, inprovement if team has time)\n  \n  For APC this list will be empty\n",
        "parameters": [
          {
            "type": "string",
            "in": "query",
            "name": "sectorId",
            "description": "sector Id filtering"
          },
          {
            "type": "string",
            "in": "query",
            "name": "sectorName",
            "description": "sector Name filtering"
          },
          {
            "type": "string",
            "in": "query",
            "name": "order1",
            "description": "'sectorName ASC' (default without order)"
          },
          {
            "type": "string",
            "in": "query",
            "name": "order2",
            "description": "'activityName ASC' (default without order)\n"
          },
          {
            "type": "string",
            "in": "query",
            "name": "keywords",
            "description": "activities keywords"
          }
        ]
      }
    },
    "/v1/quotation/activities": {
      "get": {
        "summary": "List of available activities/sectors of brokerage",
        "tags": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "./models/response_activitysector.v1.json"
              }
            }
          }
        },
        "operationId": "get-v1-quotation-activities",
        "description": "GET\n\nSummary\nList of activities and sectors belongs to the current Auth_Brokerage-Id (based on ROLE capabilities) and contains associations to API product variants\nSteps\nObtain brokerage API product variants associated \nFind the associated activities to these product variants",
        "parameters": [
          {
            "type": "string",
            "in": "query",
            "name": "activityId",
            "description": "activityId filtering"
          },
          {
            "type": "string",
            "in": "query",
            "name": "activityName",
            "description": "activityName filtering"
          },
          {
            "type": "string",
            "in": "query",
            "name": "order",
            "description": "'activityName ASC' (default without order)"
          },
          {
            "type": "string",
            "in": "query",
            "name": "keywords",
            "description": "activities keywords"
          }
        ]
      },
      "parameters": []
    },
    "/v1/quotation/product-variants/specification": {
      "get": {
        "summary": "Your GET endpoint",
        "tags": [],
        "responses": {},
        "operationId": "get-v1-quotation-product-specifications",
        "description": "GET\n\nSummary\nList of product variants specifications based on Product Variants available to the current Auth_Brokerage-Id and ActivityId (in exists in parameters) that contains API flag enabled\nSteps\nObtain brokerage API product variants associated \nMatch these product variants associated to Path parameter activityId"
      },
      "parameters": []
    }
  },
  "definitions": {},
  "securityDefinitions": {
    "API Key - 1": {
      "name": "API Key",
      "type": "apiKey",
      "in": "query",
      "description": "X-API-KEY"
    }
  }
}